25.	Design a program using concepts of inter-process communication ordinary pipes in which one process sends a string message to a second process, and the second process reverses the case of each character in the message and sends it back to the first process. For example, if the first process sends the message Hi There, the second process will return hI tHERE. This will require using two pipes, one for sending the original message from the first to the second process and the other for sending the modified message from the second to the first process. You can write this program using either UNIX or Windows pipes.
 include<stdio.h>
 include<stdlib.h>
 include<unistd.h>
 include<sys/wait.h>
 include<string.h>
 include<ctype.h>
 include<assert.h>
 include<stdbool.h>
  char *toggleString(char *argv)
  {
    int i;     
    char *str = malloc(sizeof(argv[1]));  
    strcpy(str, argv);    
     for(i=0;str[i]!='\0';i++)
 {
  if(str[i]>='A'&&str[i]<='Z')
 { 
  str[i]+=32;
 }	       
  else if (str[i]>='a'&&str[i]<='z') 
 {
  str[i]-=32;              
 }
 }
  return str;
 }
  int inputValidation(int argc, char *argv[])
 {  
  int i;          
  bool c = false; 
  char str[strlen(argv[1])];  
  strcpy(str, argv[1]); 
  if (argc != 2)  
 {     
  printf(stderr, "\nUsage: %s <string> or <'string 1, string 2', ..., string n'> for multiple strings\n", argv[0]);
  exit(EXIT_FAILURE);    
 }
  else 
 { 
  for(i=0;i<strlen(str);i++) 
 {
  if(isalpha((int) str[i]))
 {
  c = true; 
 }
 }
  if(c == false)
  printf("\nSorry dont have alphabetic\nRun me again, with at least 1 Alphabetical character\n\n");
  exit(EXIT_FAILURE);
 }   
  return (0);   
 }
 }
  int main(int argc, char *argv[]) {
  assert(argc>1);
  int fd[2*NUM_PIPES];    
  int len, i;             
  pid_t pid;             
  char parent[strlen(argv[1])];  
  char child[strlen(argv[1])];   
  if(inputValidation(argc, argv) == 0) 
  strcpy(parent, argv[1]); 
  for (i=0; i<NUM_PIPES; ++i)
 {
  if (pipe(fd+(i*2)) < 0)
 {
  perror("Failed to allocate pipes");
        exit(EXIT_FAILURE);
 }
 }

    
  if ((pid = fork()) < 0)
 {
  perror("Failed to fork process");
  return EXIT_FAILURE;
 }
 
 
